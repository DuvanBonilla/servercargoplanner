// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  dni               String              @unique
  name              String
  username          String              @unique
  password          String
  phone             String
  occupation        String
  role              Role                @default(ADMIN)
  status            StatusActivation    @default(ACTIVE)
  areas             JobArea[]
  worker            Worker[]
  operation         Operation[]
  task              Task[]
  client            Client[]
  calledAttention   CalledAttention[]
  inChargeOperation InChargeOperation[]
}

model JobArea {
  id         Int              @id @default(autoincrement())
  name       String
  status     StatusActivation @default(ACTIVE)
  workers    Worker[]
  id_user    Int
  user       User             @relation(fields: [id_user], references: [id])
  operations Operation[]
}

model Worker {
  id               Int                @id @default(autoincrement())
  dni              String             @unique
  code             String             @unique
  phone            String?
  name             String
  createAt         DateTime           @default(now())
  updateAt         DateTime           @updatedAt
  hoursWorked      Float              @default(0)
  status           Status             @default(AVALIABLE)
  id_area          Int?
  failures         Int                @default(0)
  dateDisableStart DateTime?
  dateDisableEnd   DateTime?
  dateRetierment   DateTime?
  jobArea          JobArea?           @relation(fields: [id_area], references: [id])
  id_user          Int
  user             User               @relation(fields: [id_user], references: [id])
  operations       Operation_Worker[]
  calledAttention  CalledAttention[]
  feeding         WorkerFeeding[]
  inability        Inability[]
}

model Operation {
  id                Int                 @id @default(autoincrement())
  status            StatusOperation     @default(PENDING)
  dateStart         DateTime            @db.Date
  dateEnd           DateTime?           @db.Date
  timeStrat         String
  timeEnd           String?
  zone              Int
  motorShip         String?
  id_user           Int
  user              User                @relation(fields: [id_user], references: [id])
  id_area           Int
  jobArea           JobArea             @relation(fields: [id_area], references: [id])
  id_task           Int
  task              Task                @relation(fields: [id_task], references: [id])
  workers           Operation_Worker[]
  id_client         Int
  client            Client              @relation(fields: [id_client], references: [id])
  inChargeOperation InChargeOperation[]
  createAt          DateTime            @default(now())
  updateAt          DateTime            @default(now()) @updatedAt
  feeding           WorkerFeeding[]
}

model Operation_Worker {
  id           Int       @id @default(autoincrement())
  id_operation Int
  operation    Operation @relation(fields: [id_operation], references: [id])
  id_worker    Int
  worker       Worker    @relation(fields: [id_worker], references: [id])
  timeStart    String?
  timeEnd      String?
  dateStart    DateTime? @db.Date
  dateEnd      DateTime? @db.Date
  id_group     String?
}

model Task {
  id         Int              @id @default(autoincrement())
  name       String           @unique
  id_user    Int
  status     StatusActivation @default(ACTIVE)
  user       User             @relation(fields: [id_user], references: [id])
  operations Operation[]
}

model Client {
  id         Int              @id @default(autoincrement())
  name       String
  id_user    Int
  status     StatusActivation @default(ACTIVE)
  user       User             @relation(fields: [id_user], references: [id])
  operations Operation[]
}

model CalledAttention {
  id          Int       @id @default(autoincrement())
  description String?
  type        Failures?
  id_user     Int
  createAt    DateTime  @default(now())
  user        User      @relation(fields: [id_user], references: [id])
  id_worker   Int
  worker      Worker    @relation(fields: [id_worker], references: [id])
}

model InChargeOperation {
  id           Int       @id @default(autoincrement())
  id_user      Int
  user         User      @relation(fields: [id_user], references: [id])
  id_operation Int
  operation    Operation @relation(fields: [id_operation], references: [id])
}

model WorkerFeeding {
  id           Int           @id @default(autoincrement())
  id_worker    Int
  id_operation Int
  dateFeeding  DateTime      @db.Date
  type         FeedingStatus
  createAt     DateTime      @default(now())
  updateAt     DateTime      @updatedAt
  worker       Worker        @relation(fields: [id_worker], references: [id])
  operation    Operation     @relation(fields: [id_operation], references: [id])
}

model Inability {
  id               Int             @id @default(autoincrement())
  dateDisableStart DateTime
  dateDisableEnd   DateTime
  type             TypeDisability
  cause            CauseDisability
  id_worker        Int
  worker         Worker         @relation(fields: [id_worker], references: [id])
}

enum TypeDisability {
  INITIAL
  EXTENSION
}

enum CauseDisability {
  LABOR
  TRANSIT
  DISEASE
}

enum FeedingStatus {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

enum Role {
  ADMIN
  SUPERADMIN
  GH
  SUPERVISOR
}

enum Status {
  AVALIABLE
  ASSIGNED
  UNAVALIABLE
  DEACTIVATED
  DISABLE
}

enum StatusOperation {
  PENDING
  INPROGRESS
  COMPLETED
  CANCELED
  DEACTIVATED
}

enum Failures {
  INASSISTANCE
  IRRESPECTFUL
  ABANDONMENT
}

enum StatusActivation {
  ACTIVE
  INACTIVE
}
